generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String              @id @default(cuid())
  email               String              @unique
  name                String?
  role                UserRole            @default(VISITOR)
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  deletedAt           DateTime?
  isActive            Boolean             @default(true)
  lastLoginAt         DateTime?
  theme               Json?
  address             String?
  areaId              String?
  businessIntro       String?
  businessName        String?
  city                String?
  country             String?
  facebookUrl         String?
  instagramUrl        String?
  latitude            Float?
  logoUrl             String?
  longitude           Float?
  phone               String?
  productId           String?
  profilePictureUrl   String?
  website             String?
  auditLogs           AuditLog[]
  consents            Consent[]
  emailVerifications  EmailVerification[]
  eventInteractions   EventInteraction[]
  eventViews          EventView[]
  ownedEvents         Event[]             @relation("EventOwner")
  favorites           Favorite[]
  follows             Follow[]            @relation("FollowFollower")
  followers           Follow[]            @relation("FollowFollowing")
  invitationsReceived Invitation[]        @relation("InvitationInvitee")
  invitationsSent     Invitation[]        @relation("InvitationInviter")
  ownerAnalytics      OwnerAnalytics[]
  photoGallery        PhotoGallery[]
  sessions            Session[]
  userActivities      UserActivity[]
  preferences         UserPreferences?
  area                Area?               @relation(fields: [areaId], references: [id])
  product             Product?            @relation(fields: [productId], references: [id])
  waitlistEntries     WaitlistEntry[]

  @@index([email])
  @@index([role])
  @@index([isActive])
  @@map("users")
}

model Event {
  id                String             @id @default(cuid())
  title             String
  slug              String             @unique
  description       String?
  status            EventStatus        @default(DRAFT)
  startDate         DateTime
  endDate           DateTime?
  capacity          Int?
  youtubeUrl        String?
  mapLat            Float?
  mapLng            Float?
  mapZoom           Int?
  ownerId           String
  venueId           String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  deletedAt         DateTime?
  categoryId        String?
  currentWaitlist   Int                @default(0)
  featured          Boolean            @default(false)
  isPublic          Boolean            @default(false)
  mapAddress        String?
  metadata          Json?
  shortDescription  String?
  tags              String[]
  // New location fields for user-friendly address input
  city              String?
  country           String?
  postalCode        String?
  eventInteractions EventInteraction[]
  eventViews        EventView[]
  category          Category?          @relation(fields: [categoryId], references: [id])
  owner             User               @relation("EventOwner", fields: [ownerId], references: [id])
  venue             Venue?             @relation(fields: [venueId], references: [id])
  favorites         Favorite[]
  nearbyPlaces      NearbyPlace[]
  shows             Show[]
  waitlist          WaitlistEntry[]

  @@index([slug])
  @@index([startDate])
  @@index([status])
  @@index([isPublic])
  @@index([featured])
  @@index([categoryId])
  @@map("events")
}

model Venue {
  id        String    @id @default(cuid())
  name      String    @unique
  address   String
  city      String
  country   String
  latitude  Float?
  longitude Float?
  website   String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  events    Event[]

  @@index([name])
  @@map("venues")
}

model WaitlistEntry {
  id        String         @id @default(cuid())
  email     String
  eventId   String
  userId    String?
  status    WaitlistStatus @default(PENDING)
  metadata  Json?
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  deletedAt DateTime?
  event     Event          @relation(fields: [eventId], references: [id])
  user      User?          @relation(fields: [userId], references: [id])

  @@unique([email, eventId])
  @@index([eventId])
  @@index([email])
  @@map("waitlist_entries")
}

model Session {
  id        String    @id @default(cuid())
  userId    String
  token     String    @unique
  expiresAt DateTime
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  user      User      @relation(fields: [userId], references: [id])

  @@index([token])
  @@index([expiresAt])
  @@map("sessions")
}

model AuditLog {
  id         String   @id @default(cuid())
  action     String
  resource   String
  resourceId String
  userId     String?
  ipAddress  String?
  userAgent  String?
  metadata   Json?
  createdAt  DateTime @default(now())
  user       User?    @relation(fields: [userId], references: [id])

  @@index([resource, resourceId])
  @@index([userId])
  @@index([createdAt])
  @@map("audit_logs")
}

model Show {
  id              String    @id @default(cuid())
  title           String
  description     String?
  startDate       DateTime
  endDate         DateTime?
  capacity        Int?
  currentWaitlist Int       @default(0)
  youtubeUrl      String?
  eventId         String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  deletedAt       DateTime?
  event           Event     @relation(fields: [eventId], references: [id])

  @@index([eventId])
  @@index([startDate])
  @@map("shows")
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?
  color       String?
  icon        String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  events      Event[]

  @@index([slug])
  @@index([isActive])
  @@map("categories")
}

model Area {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?
  color       String?
  icon        String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  users       User[]

  @@index([slug])
  @@index([isActive])
  @@map("areas")
}

model Product {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?
  color       String?
  icon        String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  users       User[]

  @@index([slug])
  @@index([isActive])
  @@map("products")
}

model EmailVerification {
  id         String                @id @default(cuid())
  email      String
  token      String                @unique
  type       EmailVerificationType
  expiresAt  DateTime
  verifiedAt DateTime?
  userId     String?
  createdAt  DateTime              @default(now())
  user       User?                 @relation(fields: [userId], references: [id])

  @@index([email])
  @@index([token])
  @@index([expiresAt])
  @@map("email_verifications")
}

model Consent {
  id        String      @id @default(cuid())
  userId    String
  type      ConsentType
  granted   Boolean
  grantedAt DateTime?
  ipAddress String?
  userAgent String?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  user      User        @relation(fields: [userId], references: [id])

  @@unique([userId, type])
  @@index([type])
  @@map("consents")
}

model NearbyPlace {
  id        String   @id @default(cuid())
  name      String
  address   String
  latitude  Float
  longitude Float
  category  String
  rating    Float?
  website   String?
  phone     String?
  distance  Float?
  eventId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  event     Event    @relation(fields: [eventId], references: [id])

  @@index([eventId])
  @@index([category])
  @@index([distance])
  @@map("nearby_places")
}

model Invitation {
  id         String    @id @default(cuid())
  email      String
  role       UserRole
  token      String    @unique
  expiresAt  DateTime
  acceptedAt DateTime?
  invitedBy  String
  createdAt  DateTime  @default(now())
  invitee    User      @relation("InvitationInvitee", fields: [email], references: [email])
  inviter    User      @relation("InvitationInviter", fields: [invitedBy], references: [id])

  @@index([email])
  @@index([token])
  @@index([expiresAt])
  @@map("invitations")
}

model PhotoGallery {
  id           String    @id @default(cuid())
  title        String
  description  String?
  imageUrl     String
  thumbnailUrl String?
  altText      String?
  order        Int       @default(0)
  isActive     Boolean   @default(true)
  ownerId      String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?
  owner        User      @relation(fields: [ownerId], references: [id])

  @@index([ownerId])
  @@index([isActive])
  @@index([order])
  @@map("photo_gallery")
}

model UserActivity {
  id          String   @id @default(cuid())
  userId      String
  action      String
  description String?
  metadata    Json?
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([action])
  @@index([createdAt])
  @@map("user_activities")
}

model Follow {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  follower    User     @relation("FollowFollower", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("FollowFollowing", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
  @@map("follows")
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  eventId   String
  createdAt DateTime @default(now())
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId])
  @@index([userId])
  @@index([eventId])
  @@map("favorites")
}

model UserPreferences {
  id          String   @id @default(cuid())
  userId      String   @unique
  preferences Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_preferences")
}

model EventView {
  id           String   @id @default(cuid())
  eventId      String
  userId       String?
  sessionId    String?
  ipAddress    String?
  userAgent    String?
  referrer     String?
  country      String?
  city         String?
  deviceType   String?
  browser      String?
  os           String?
  viewDuration Int?
  createdAt    DateTime @default(now())
  event        Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user         User?    @relation(fields: [userId], references: [id])

  @@index([eventId])
  @@index([userId])
  @@index([sessionId])
  @@index([createdAt])
  @@map("event_views")
}

model EventInteraction {
  id        String   @id @default(cuid())
  eventId   String
  userId    String?
  sessionId String?
  action    String
  element   String?
  metadata  Json?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user      User?    @relation(fields: [userId], references: [id])

  @@index([eventId])
  @@index([userId])
  @@index([sessionId])
  @@index([action])
  @@index([createdAt])
  @@map("event_interactions")
}

model OwnerAnalytics {
  id                String   @id @default(cuid())
  ownerId           String
  date              DateTime @db.Date
  totalViews        Int      @default(0)
  uniqueUsers       Int      @default(0)
  totalEvents       Int      @default(0)
  totalWaitlist     Int      @default(0)
  totalInteractions Int      @default(0)
  topEvent          String?
  topCountry        String?
  topDevice         String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  owner             User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  @@unique([ownerId, date])
  @@index([ownerId])
  @@index([date])
  @@map("owner_analytics")
}

enum UserRole {
  VISITOR
  OWNER
  ADMIN
}

enum EventStatus {
  DRAFT
  PUBLISHED
  CANCELLED
  COMPLETED
}

enum WaitlistStatus {
  PENDING
  CONFIRMED
  CANCELLED
  APPROVED
  REJECTED
  ARRIVED
}

enum EmailVerificationType {
  MAGIC_LINK
  EMAIL_VERIFICATION
  PASSWORD_RESET
  OWNER_INVITATION
}

enum ConsentType {
  ANALYTICS
  MARKETING
  NECESSARY
  FUNCTIONAL
}
